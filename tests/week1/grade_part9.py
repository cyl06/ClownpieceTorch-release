import sys
import os

import torch
from graderlib import self_path
from graderlib import set_debug_mode, testcase, grader_summary

@testcase(name="unfold", score=10000)

def unfold(impl = torch):
  input = impl.Tensor(
   [[[[0.684099, -2.66983, -0.808975, -0.815924],
      [-2.24, -1.58632, -0.032604, -0.578709],
      [-1.34032, 0.0271922, 0.0779953, -1.72935]],
    [[-0.0880328, -1.13792, -0.670068, 0.61169],
      [0.363175, -0.0490585, -1.65437, -1.14632],
      [0.710578, 0.224724, 0.598648, -1.28412]],
    [[-0.654836, 1.24782, 0.408083, 0.77277],
      [0.852651, 0.254826, -0.346673, 0.500711],
      [-0.5497, 0.22068, -0.133781, 0.914621]],
    [[1.05494, -0.428134, 0.412884, -0.263098],
      [-0.433184, -1.76769, -0.729613, 0.401189],
      [0.771209, -1.4377, -0.397772, 0.730242]],
    [[0.575151, 1.41498, 0.662788, 1.87362],
      [0.251248, 1.81101, -0.437528, 1.44367],
      [-0.524933, -1.28689, -0.899868, 0.204497]]],
    [[[-1.38194, -0.271253, -0.364355, -0.477569],
      [0.372122, 0.607142, 1.13608, 0.626165],
      [-0.180362, -0.0151901, -1.06997, -2.25199]],
    [[0.537613, 1.32774, -0.298746, 0.348423],
      [-0.849433, -2.22099, 1.01609, 0.254668],
      [0.244835, 0.253583, 0.0700077, -0.289727]],
    [[-1.48516, 0.676685, 0.910847, -0.370211],
      [1.07763, -0.321541, 0.0805993, -0.379095],
      [-1.72591, 0.0267828, -0.493419, -0.581669]],
    [[-0.6657, 0.142781, 0.989012, 0.68986],
      [1.04727, -1.32189, -0.158668, -0.59801],
      [0.43946, 0.0514675, -1.61808, -0.978914]],
    [[-1.21817, 0.134859, 0.253537, 0.457947],
      [0.355958, 0.345809, -1.21304, 1.0474],
      [0.134916, 0.78812, -1.86284, 0.120061]]]])
  if impl.__name__ == "torch":
    unfold1 = torch.nn.Unfold(kernel_size=(2, 3))
    output1 = unfold1(input)
    unfold2 = torch.nn.Unfold(kernel_size=(3, 2))
    output2 = unfold2(input)
    unfold3 = torch.nn.Unfold(kernel_size=(1, 3))
    output3 = unfold3(input)
    unfold4 = torch.nn.Unfold(kernel_size=(1, 1))
    output4 = unfold4(input)
    unfold5 = torch.nn.Unfold(kernel_size=(2, 2))
    output5 = unfold5(input)
  else:
    output1 = impl.unfold(input, [2, 3])
    output2 = impl.unfold(input, [3, 2])
    output3 = impl.unfold(input, [1, 3])
    output4 = impl.unfold(input, [1, 1])
    output5 = impl.unfold(input, [2, 2])
  # each patch contains 30 values (2x3=6 vectors, each of 5 channels)
  # 4 blocks (2x3 kernels) in total in the 3x4 input
  # return output.size()
  return output1, output2, output3, output4, output5

@testcase(name="fold", score=10000)

def fold(impl = torch):
  input = impl.Tensor(
    [[[1.61478, -1.19092, -0.230509, 0.598273, -0.484645, 0.0598365, 0.294523, 0.366108, 0.41631, -0.474191, 0.874146, 1.28314],
      [0.591874, -0.0754781, -1.73124, -1.03691, 1.05712, 0.941173, 1.06601, -0.00180412, -4.08773, -1.10553, 0.449359, -0.673531],
      [0.532545, -0.223882, -0.215402, 0.438457, -0.0887935, -1.68066, -0.167506, 0.0673138, 0.253125, -1.62187, -0.115162, -0.86706],
      [-0.146459, 2.08647, 2.42094, -0.453154, 0.353498, -1.3811, -0.30311, 0.701452, 0.577171, -0.71723, 0.451657, -1.01018],
      [0.898493, 0.156425, 0.0473368, -0.912298, 0.613729, -0.744595, 0.03062, -1.22052, -1.73824, 0.357316, 0.386115, 1.64852],
      [-1.16775, 0.11113, 2.0687, -0.310095, -0.117126, -0.0769266, -0.373163, 0.961145, 0.515722, -1.22231, 1.22057, -0.44472],
      [1.32969, 0.751188, -1.88378, 0.889499, 2.81767, -0.743946, -1.38635, -0.230514, 0.635845, -0.401133, -0.62526, -2.3839],
      [-0.220733, -0.955783, -0.836266, 0.170229, 0.0487861, 0.105592, -0.844233, -0.189687, 1.29777, -0.141065, -0.540492, -0.318751],
      [-0.118775, -1.93298, 0.690592, 0.333564, 1.36557, -0.193598, 1.97532, -0.640268, 0.0729582, -0.663935, 0.825348, 0.421515],
      [0.507656, -0.561577, -0.529497, -0.95214, 1.07132, 1.00714, 0.370445, -0.440273, 0.587763, 1.3097, -0.810236, -1.63057],
      [-0.288174, 0.943743, 0.796563, 0.797578, -2.07349, -0.108651, -0.493578, 1.52364, -1.33236, 0.114388, -1.33888, 0.0921712],
      [-0.450815, -0.706282, 0.115157, -0.958666, -0.217025, 0.515656, 0.94489, -1.9296, 0.954736, -1.0346, 1.41443, -0.0958211]]])
  if impl.__name__ == "torch":
    fold = torch.nn.Fold(output_size=(4, 5), kernel_size=(2, 2))
    output = fold(input)
  else:
    output = impl.fold(input, [4, 5], [2, 2])
  return output

@testcase(name="unfold & fold", score=10000)
def comprehensive(impl = torch):
  inp = impl.Tensor(
    [[[[-0.286037, 1.72707, 0.148865, -0.815275, -0.565091, 0.426917, 0.84797, 0.17942, 1.19711, -0.792038, 0.837364, 0.470338],
       [-1.7982, 1.44509, 0.839922, -0.859145, -0.0847108, 0.386881, -0.966639, -0.822292, -1.08421, 1.35075, -0.629903, 1.08006],
       [-0.177281, -1.19753, 1.36712, -0.338066, -0.746437, -1.20701, 1.18601, 1.32596, -1.51811, 0.21528, 0.600178, 0.41297],
       [-0.574095, -0.517079, -0.533353, 0.540503, 0.374637, 0.571759, 0.422618, -0.355232, 1.22395, 0.341918, -0.364556, 0.256093],
       [-0.705757, -0.43843, -2.98578, -0.898131, -0.57132, -0.0346407, -0.662507, 1.09098, -0.362309, 0.388757, 0.479558, 1.21192],
       [-0.246572, -1.93836, -0.941842, 0.0370184, -1.90789, -0.447897, -0.877872, 1.40368, 0.829966, 2.14947, -1.93836, -1.82019],
       [-0.485932, 0.157139, 0.900326, 0.365648, -1.94575, 0.883235, -1.06928, -2.23627, -2.51589, -0.333307, -0.08717, -0.813047],
       [-0.213776, 0.0703384, -1.58747, -0.772815, -0.37345, 1.67586, 1.60286, -0.168062, 0.531119, -0.353585, -0.72468, 0.050768],
       [1.01134, 0.812058, -0.598273, -1.49885, 1.551, 0.654533, -0.244511, -0.968828, 2.23273, 1.48434, 1.71972, -0.271765],
       [0.670871, 0.324567, -1.70049, 0.0722455, -1.38397, -0.53671, 1.29419, 0.816536, 0.923433, -0.699048, 0.572073, -1.12676]],
      [[-1.99076, -0.112561, -0.76534, -1.48024, 0.82322, -0.176448, -0.78936, 0.34312, -0.499689, -0.337862, 0.973641, -1.63302],
       [0.77526, -0.425459, 0.681514, -1.71096, 0.633127, 2.67092, 0.258782, 0.0921672, 0.270304, -0.113938, 0.51922, 0.888604],
       [1.03026, 0.970353, -0.0573979, 1.54375, -0.119342, 0.651219, 1.93175, -0.967824, 2.11631, -0.415473, -0.717701, -2.28255],
       [0.739365, 0.570817, -0.3761, 0.0355637, -1.4675, 0.000251759, -1.42321, 0.764582, -0.0190878, -1.64223, 0.332421, 0.122952],
       [-0.036089, 1.1132, -1.64198, 0.0474308, -0.146167, 0.695031, -0.0947421, -2.8618, -1.95585, 0.730116, 1.02425, 0.697331],
       [-0.400265, 0.879372, 2.32354, -0.960128, 1.51957, 0.65209, -0.254694, -1.4003, -0.477601, 0.0385565, -0.400535, -1.66633],
       [0.665539, 0.668196, -0.550766, -0.919727, 0.150586, -0.646339, 0.0942068, -0.424139, -1.25207, -1.43808, 0.121221, 2.2762],
       [0.569256, -1.66281, 0.597532, -0.662731, 0.45551, -0.549927, -0.787113, -0.0252289, -0.428791, -0.109747, -0.171997, -1.53181],
       [-1.55564, -0.585022, -0.671553, -1.55785, 0.237799, 3.14959, -1.05757, 1.13073, 0.13826, -1.03818, 0.789355, -0.189301],
       [1.25868, 1.44971, 0.804034, -0.629813, 0.27346, -0.319864, -0.571563, 0.424526, 0.748168, -0.0647249, 0.281479, 0.182639]],
      [[0.167855, -0.112016, -1.62077, -0.261666, -0.0764917, 1.87952, 0.754842, -1.21906, 2.0675, 0.507485, -1.62982, -0.322844],
       [0.112545, -1.39225, 1.39298, -0.955316, 2.15376, -0.263284, 1.55763, 0.607903, 0.349781, -0.0071422, 0.350422, 0.134136],
       [1.03549, -0.501723, 0.985131, 0.684676, -0.68818, 0.46515, 2.41397, -0.606411, 0.888118, -0.29477, 1.15603, 0.225295],
       [-0.481086, 0.0335888, 0.553817, -2.0249, 1.3917, 2.48802, 1.19227, 0.0423679, 3.14216, -0.498194, 1.5271, -0.142932],
       [-0.352369, 2.03124, -1.17303, 0.696517, -1.22949, 0.887501, -0.3622, -0.30882, -0.263226, 0.971151, 0.310887, -1.20696],
       [-0.133801, 0.397475, 0.664568, -0.73024, -1.63277, 0.0749346, 1.80629, 0.402802, -2.04522, -0.556025, 0.596141, 1.0096],
       [-0.0608863, 1.39749, -1.52156, 2.0613, 0.792959, 1.72121, 1.05228, -0.130088, 0.803839, 0.755009, 1.56783, -1.30438],
       [-0.211326, 0.667028, -0.529412, -0.609084, 0.135934, -0.696584, 0.223339, -0.408434, -0.436451, 1.05742, -0.718295, -1.61914],
       [1.16598, 1.70669, -0.498719, 1.52154, 1.31777, 0.399399, -0.85914, 0.90634, -0.921215, -0.844697, 0.154325, 1.71112],
       [-0.674197, 1.19733, -0.840835, -0.837067, 1.00711, -1.72752, 0.0903018, -0.486984, 0.311913, -0.487203, -0.661153, 2.0686]]]])
  
  w = impl.Tensor(
    [[[[-0.724021, 0.641449, -2.49065, 0.211301, 0.392132],
       [0.190817, 0.553852, 0.438353, 0.90388, 0.798365],
       [0.590415, -0.366289, -0.0265132, -0.00514857, 0.30698],
       [1.35672, -1.40165, -0.838515, -0.0628395, -0.000570761]],
      [[-2.61884, 0.417195, -1.85759, -1.24378, 0.162413],
       [0.964723, 0.643787, 1.03867, 0.825079, -1.14526],
       [-1.66439, -1.61314, 0.372913, -0.870174, -2.08371],
       [-1.22447, 1.06951, 0.631671, 0.214312, 2.04733]],
      [[0.533524, 0.105425, 0.895884, 0.432296, 0.858633],
       [1.60044, -0.0268229, 0.0403271, 0.236713, 0.581645],
       [0.0467834, -0.745889, 0.31962, -1.82933, 0.234949],
       [0.166441, -1.01182, -1.27779, 0.567599, 0.910983]]],
     [[[-1.53552, -0.994475, -0.465683, 0.185439, -0.42384],
       [0.352088, 0.791861, -1.9956, -0.2318, -1.70545],
       [-0.033337, 0.297387, -0.0345254, -1.63702, -0.478121],
       [-0.354293, 0.107615, 0.129975, -0.428731, -0.740729]],
      [[-0.527116, 1.02945, 0.301965, -1.72221, -0.622869],
       [-0.0933961, -1.50927, -0.215147, 0.336273, 0.192545],
       [0.635351, 0.449674, -1.11651, -0.199077, -0.175443],
       [0.922151, 1.47126, -0.309221, -1.38674, 1.4249]],
      [[1.88589, -0.0338851, 1.00106, 1.4482, -0.224235],
       [-1.45907, 0.46854, 0.299053, -1.79179, -0.620932],
       [-0.167815, 0.21093, -0.379566, 0.894621, 1.10281],
       [0.240378, -1.16738, 2.15608, -1.53528, -0.657122]]]])
  
  if impl.__name__ == "torch":
    inp_unf = torch.nn.functional.unfold(inp, (4, 5))
    out_unf = inp_unf.transpose(1, 2).matmul(w.view(w.size(0), -1).t()).transpose(1, 2)
    out = torch.nn.functional.fold(out_unf, (7, 8), (1, 1))
  else:
    inp_unf = impl.unfold(inp, [4, 5])
    out_unf = inp_unf.transpose(1, 2).matmul(w.view(w.size(0), -1).transpose(-1, -2)).transpose(1, 2)
    out = impl.fold(out_unf, [7, 8], [1, 1])
  return out

def testsets_part9():
  unfold()
  fold()
  comprehensive()

if __name__ == "__main__":
  print("Beginning grading part 9")
  set_debug_mode(True)
  testsets_part9()
  grader_summary("part9")